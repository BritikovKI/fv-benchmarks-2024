(set-logic HORN)
(set-info :source |
  Benchmark: ../../sv-benchmarks/c/loops-crafted-1/multiloops/multiloop5.c
  Generated by Korn 0.4 https://github.com/gernst/korn
|)


(declare-sort Pointer 1)

(declare-fun $__VERIFIER_assert_pre (Int) Bool)
(declare-fun __assert_fail ((Pointer Int) (Pointer Int) Int (Pointer Int)) Bool)
(declare-fun $__VERIFIER_assert_if1 (Int Int) Bool)
(declare-fun $main_inv1 (Int Int) Bool)
(declare-fun $__assert_fail_pre ((Pointer Int) (Pointer Int) Int (Pointer Int)) Bool)
(declare-fun $main_if2 (Int Int Int Int) Bool)
(declare-fun $main_sum2 (Int Int) Bool)
(declare-fun $main_if3 (Int Int Int Int) Bool)
(declare-fun $main_inv2 (Int Int) Bool)
(declare-fun __VERIFIER_assert (Int) Bool)
(declare-fun $main_sum1 (Int Int) Bool)
(declare-fun $__VERIFIER_assert_ERROR (Int Int) Bool)

; label ERROR
(assert
  (forall ((cond!1 Int))
    (=> (and (not (not (= cond!1 0)))
             ($__VERIFIER_assert_pre cond!1))
        ($__VERIFIER_assert_ERROR cond!1 cond!1))))

; error
(assert
  (forall ((cond!1 Int) (cond!2 Int))
    (=> (and ($__VERIFIER_assert_ERROR cond!1 cond!2))
        false)))

; if else
(assert
  (forall ((cond!1 Int))
    (=> (and (not (not (not (= cond!1 0))))
             ($__VERIFIER_assert_pre cond!1))
        ($__VERIFIER_assert_if1 cond!1 cond!1))))

; post __VERIFIER_assert
(assert
  (forall ((cond!1 Int) (cond!3 Int))
    (=> (and ($__VERIFIER_assert_if1 cond!1 cond!3))
        (__VERIFIER_assert cond!1))))

; loop entry $main_inv1 (line 10)
(assert
  (forall ((x!4 Int) (y!5 Int))
    (=> (and (= y!5 50)
             (= x!4 1))
        ($main_inv1 x!4 y!5))))

; loop term $main_sum1 (line 10)
(assert
  (forall ((x!6 Int) (y!7 Int))
    (=> (and (not (< y!7 100))
             ($main_inv1 x!6 y!7))
        ($main_sum1 x!6 y!7))))

; if then
(assert
  (forall ((x!6 Int) (y!7 Int))
    (=> (and (< x!6 10)
             (< y!7 100)
             ($main_inv1 x!6 y!7))
        ($main_if2 x!6 y!7 (+ x!6 1) y!7))))

; if else
(assert
  (forall ((x!6 Int) (y!7 Int))
    (=> (and (not (< x!6 10))
             (< y!7 100)
             ($main_inv1 x!6 y!7))
        ($main_if2 x!6 y!7 (- x!6 1) (+ y!7 4)))))

; forwards $main_inv1 (line 10)
(assert
  (forall ((x!8 Int) (y!9 Int) (x!6 Int) (y!7 Int))
    (=> (and ($main_if2 x!6 y!7 x!8 y!9))
        ($main_inv1 x!8 y!9))))

; loop entry $main_inv2 (line 21)
(assert
  (forall ((x!10 Int) (y!11 Int))
    (=> (and (>= x!10 100)
             ($main_sum1 x!10 y!11))
        ($main_inv2 x!10 y!11))))

; loop term $main_sum2 (line 21)
(assert
  (forall ((x!12 Int) (y!13 Int))
    (=> (and (not (> x!12 y!13))
             ($main_inv2 x!12 y!13))
        ($main_sum2 x!12 y!13))))

; forwards $main_inv2 (line 21)
(assert
  (forall ((x!12 Int) (y!13 Int))
    (=> (and (> x!12 y!13)
             ($main_inv2 x!12 y!13))
        ($main_inv2 (- x!12 1) y!13))))

; if then
(assert
  (forall ((x!4 Int) (y!5 Int) (x!14 Int) (y!15 Int))
    (=> (and ($main_sum2 x!14 y!15))
        ($main_if3 x!4 y!5 x!14 y!15))))

; if else
(assert
  (forall ((x!4 Int) (y!5 Int) (x!10 Int) (y!11 Int))
    (=> (and (not (>= x!10 100))
             ($main_sum1 x!10 y!11))
        ($main_if3 x!4 y!5 x!10 y!11))))

; pre __VERIFIER_assert
(assert
  (forall ((x!16 Int) (y!17 Int) (x!4 Int) (y!5 Int))
    (=> (and ($main_if3 x!4 y!5 x!16 y!17))
        ($__VERIFIER_assert_pre (ite (= x!16 (+ y!17 20)) 1 0)))))

(check-sat)
